'use strict';

import { Scenes, Composer, session } from 'telegraf';

import { createKeyboardInOneColumn } from '../keyboards.js';
import getAdmins from '../admins-list.js';
import { parseJSON, updateJSON } from '../work-with-json.js';

// –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ —á–∏ —î —Ä—è–¥–æ–∫ —á–∏—Å–ª–æ–º
function checkIsNumber(str) {
    return (!isNaN(str) && !isNaN(parseFloat(str)));
}

// –ü–æ–≤–µ—Ä–Ω–µ–Ω–Ω—è –∫—É—Ä—Å—É USD –∑ —Ñ–∞–π–ª—É JSON
function checkDollarRate() {
    const dollarJsonObject = parseJSON('src/json/dollar-rate.json');
    return dollarJsonObject.dollarRate;
}

const sendFunctionality = new Composer();
sendFunctionality.on('text', async (ctx) => {
    const ADMINISTRATORS = getAdmins();
    const currentUser = '@' + ctx.message.from.username;

    if (!ADMINISTRATORS.includes(currentUser)) {
        await ctx.reply('–í–∏ –Ω–µ —î –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º.');
        return ctx.scene.leave();
    }

    await ctx.reply(
        '–û–±–µ—Ä—ñ—Ç—å –¥—ñ—é:', 
        createKeyboardInOneColumn(['‚ùì –ü–æ—Ç–æ—á–Ω–∏–π –∫—É—Ä—Å USD', 'üí∞ –ó–º—ñ–Ω–∏—Ç–∏ –∫—É—Ä—Å USD'])
    );

    return ctx.wizard.next();
});

const selectFunction = new Composer();
selectFunction.action('‚ùì –ü–æ—Ç–æ—á–Ω–∏–π –∫—É—Ä—Å USD', async (ctx) => {
    await ctx.replyWithHTML(`–ü–æ—Ç–æ—á–Ω–∏–π –∫—É—Ä—Å USD: <b>${checkDollarRate()} –≥—Ä–Ω.</b>`)
    return ctx.scene.leave();
});

selectFunction.action('üí∞ –ó–º—ñ–Ω–∏—Ç–∏ –∫—É—Ä—Å USD', async (ctx) => {
    await ctx.reply('–í–≤–µ–¥—ñ—Ç—å –Ω–æ–≤–∏–π –∫—É—Ä—Å USD:');
    return ctx.wizard.next();
});

// –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –≤–≤–µ–¥–µ–Ω–∏—Ö –¥–∞–Ω–∏—Ö –Ω–∞ –∫–æ—Ä–µ–∫—Ç–Ω—ñ—Å—Ç—å —Ç–∞ –∑–º—ñ–Ω–∞ –ø–æ—Ç–æ—á–Ω–æ–≥–æ –∫—É—Ä—Å—É USD
const changeDollarRate = new Composer();
changeDollarRate.on('text', async (ctx) => {
    const dollarRate = await ctx.message.text.replace(/,/g, '.');
    if (!checkIsNumber(dollarRate)) {
        await ctx.reply('–í–≤–µ–¥–µ–Ω–æ –Ω–µ–∫–æ—Ä–µ–∫—Ç–Ω–µ –∑–Ω–∞—á–µ–Ω–Ω—è');
        return ctx.scene.leave();
    }
    await updateJSON('src/json/dollar-rate.json', { dollarRate });
    await ctx.replyWithHTML(
        `<b>–ó–Ω–∞—á–µ–Ω–Ω—è –∑–º—ñ–Ω–µ–Ω–æ.</b>\n\n–ü–æ—Ç–æ—á–Ω–∏–π –∫—É—Ä—Å USD: <b>${checkDollarRate()} –≥—Ä–Ω.</b>`
    );
    
    return ctx.scene.leave();
});

const dollarScene = new Scenes.WizardScene(
    'dollarScene', 
    sendFunctionality, 
    selectFunction,
    changeDollarRate
);

export { dollarScene, checkDollarRate };
